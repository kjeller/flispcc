// This is a hand-modified version of the Exp class generated by BNFC.

package C.Absyn;

public abstract class Exp implements java.io.Serializable {

  // Hand-added field for caching the type of an expression.
  // Set by the TypeChecker, read by the Compiler.
  private Type type_ = null;
  public Type getType()       { return type_; }
  public Type setType(Type t) { type_ = t; return t; }
  public boolean isSubType = false;

  public abstract <R,A> R accept(Exp.Visitor<R,A> v, A arg);
  public interface Visitor <R,A> {
    public R visit(C.Absyn.EInt p, A arg);
    //public R visit(C.Absyn.EDouble p, A arg);
    public R visit(C.Absyn.ETrue p, A arg);
    public R visit(C.Absyn.EFalse p, A arg);
    public R visit(C.Absyn.EId p, A arg);
    public R visit(C.Absyn.ECall p, A arg);
    public R visit(C.Absyn.EPIncr p, A arg);
    public R visit(C.Absyn.EPDecr p, A arg);
    public R visit(C.Absyn.EIncr p, A arg);
    public R visit(C.Absyn.EDecr p, A arg);
    public R visit(C.Absyn.EMul p, A arg);
    public R visit(C.Absyn.EDiv p, A arg);
    public R visit(C.Absyn.EAdd p, A arg);
    public R visit(C.Absyn.ESub p, A arg);
    public R visit(C.Absyn.ELt p, A arg);
    public R visit(C.Absyn.EGt p, A arg);
    public R visit(C.Absyn.ELEq p, A arg);
    public R visit(C.Absyn.EGeq p, A arg);
    public R visit(C.Absyn.EEq p, A arg);
    public R visit(C.Absyn.ENeq p, A arg);
    public R visit(C.Absyn.EAnd p, A arg);
    public R visit(C.Absyn.EOr p, A arg);
    public R visit(C.Absyn.EAss p, A arg);
  }
}
